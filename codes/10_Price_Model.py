def predictNoArrDelay(Carrier,FlightNumber,Origin,Destination):
    l=[]
    ArrivalOnTimeCoef=0
    
    CarrierOnTime = [(58.65, 'CO'), (50.45, 'UA')]
    FlightNumberOnTime = [(96.97, 1082), (91.89, 1078), (90.2, 1066), (88.0, 1036), (85.29, 197), (85.19, 469), (84.62, 1068), (84.38, 1090), (84.21, 1044), (83.87, 1088), (83.33, 2472), (82.76, 1026), (82.35, 596), (81.82, 1043), (81.25, 143), (80.77, 1054), (80.0, 63), (79.41, 740), (78.89, 84), (78.57, 576), (78.12, 749), (78.0, 1060), (77.42, 202), (77.08, 1440), (76.92, 2456), (76.67, 786), (76.47, 1930), (75.86, 1635), (75.81, 2753), (75.76, 1020), (75.0, 2546), (74.55, 1062), (74.19, 1051), (73.81, 1074), (73.77, 478), (73.08, 604), (72.73, 1049), (72.58, 756), (72.0, 424), (71.88, 602), (71.67, 67), (71.43, 603), (71.21, 205), (71.05, 472), (70.97, 2471), (70.77, 199), (70.37, 728), (70.27, 548), (70.0, 97), (69.89, 81), (69.84, 744), (69.7, 802), (69.49, 499), (69.44, 1064), (68.75, 2640), (68.57, 868), (68.33, 796), (68.18, 101), (68.09, 60), (68.0, 1424), (67.86, 387), (67.69, 1061), (67.65, 2489), (66.67, 375), (66.13, 1339), (66.1, 138), (65.71, 768), (65.62, 2733), (65.52, 1058), (65.45, 1076), (65.08, 2864), (65.0, 462), (64.86, 426), (64.71, 1410), (64.52, 1175), (64.29, 1561), (64.06, 505), (64.0, 597), (63.64, 1079), (63.49, 102), (63.33, 1704), (63.16, 1412), (63.08, 249), (62.71, 510), (62.5, 109), (62.26, 1071), (62.07, 1432), (62.0, 1052), (61.9, 1467), (61.76, 397), (61.73, 65), (61.54, 2788), (61.48, 441), (61.4, 758), (61.29, 2049), (61.19, 378), (61.11, 2602), (60.61, 2020), (60.47, 1080), (60.32, 399), (60.23, 752), (60.0, 1420), (59.82, 85), (59.78, 403), (59.65, 244), (59.63, 1534), (59.62, 1081), (59.38, 2261), (59.26, 724), (58.97, 187), (58.82, 252), (58.73, 220), (58.62, 1605), (58.49, 246), (58.33, 770), (58.21, 466), (58.06, 203), (57.95, 1063), (57.81, 193), (57.69, 613), (57.63, 148), (57.58, 496), (57.5, 574), (57.45, 128), (57.35, 137), (57.33, 440), (57.26, 755), (57.14, 2601), (56.92, 379), (56.7, 1488), (56.67, 512), (56.6, 761), (56.58, 147), (56.52, 1446), (56.45, 2761), (56.25, 782), (56.0, 2404), (55.88, 713), (55.56, 215), (55.38, 145), (55.34, 68), (55.29, 960), (55.21, 116), (55.17, 1417), (55.1, 639), (55.0, 1073), (54.84, 1405), (54.76, 204), (54.69, 111), (54.55, 1231), (54.42, 743), (54.41, 775), (54.29, 590), (54.17, 558), (54.1, 552), (54.05, 773), (53.97, 497), (53.85, 753), (53.68, 233), (53.66, 77), (53.57, 1267), (53.33, 1609), (53.27, 79), (53.23, 1028), (53.12, 2794), (53.03, 750), (52.87, 226), (52.78, 690), (52.63, 504), (52.5, 70), (52.38, 136), (52.34, 419), (52.24, 62), (52.17, 1436), (52.05, 506), (51.92, 1389), (51.85, 2286), (51.72, 731), (51.61, 2751), (51.56, 475), (51.52, 434), (51.35, 793), (51.28, 149), (51.22, 385), (51.11, 74), (51.02, 1465), (50.98, 133), (50.88, 735), (50.82, 1027), (50.79, 2755), (50.59, 56), (50.43, 227), (50.0, 267)]
    OriginOnTime = [(83.87, 'SAV'), (82.02, 'BOI'), (77.27, 'TRI'), (76.67, 'MLB'), (71.43, 'MKE'), (70.97, 'ACY'), (70.83, 'OKC'), (70.0, 'PHF'), (67.83, 'HOU'), (66.67, 'TLH'), (65.22, 'GEG'), (65.15, 'IAH'), (64.71, 'TUL'), (64.29, 'MEM'), (63.39, 'BHM'), (63.33, 'LIH'), (62.61, 'JAX'), (62.42, 'PWM'), (61.54, 'CAE'), (61.28, 'MSY'), (60.39, 'AVP'), (58.54, 'RIC'), (58.5, 'IAD'), (58.27, 'DAL'), (57.69, 'LBB'), (57.24, 'RDU'), (56.0, 'MAF'), (55.62, 'GSO'), (55.29, 'CLE'), (55.14, 'ORF'), (54.64, 'ISP'), (54.58, 'CLT'), (52.5, 'ELP'), (51.96, 'DTW'), (51.72, 'CHS'), (51.38, 'DEN'), (50.94, 'SLC'), (50.89, 'BNA'), (50.35, 'MCI'), (50.0, 'LIT')]
    DestinationOnTime = [(88.0, 'ICT'), (82.76, 'COS'), (70.97, 'SBN'), (70.24, 'FAY'), (69.49, 'MDT'), (68.75, 'LIT'), (67.24, 'OKC'), (66.36, 'HNL'), (65.52, 'CAK'), (64.52, 'KOA'), (64.1, 'TUL'), (62.5, 'GRR'), (61.29, 'ILM'), (60.84, 'MIA'), (60.14, 'JAX'), (60.09, 'DFW'), (58.72, 'OMA'), (58.65, 'IAD'), (57.72, 'CLE'), (57.69, 'GSP'), (57.5, 'RIC'), (57.14, 'ACY'), (56.84, 'BTV'), (56.67, 'MKE'), (55.37, 'DEN'), (55.06, 'CLT'), (54.84, 'TOL'), (54.39, 'MHT'), (54.24, 'RSW'), (52.94, 'PWM'), (51.26, 'BOS'), (50.9, 'BDL'), (50.84, 'BNA'), (50.0, 'AVP')]
    
    for i in CarrierOnTime:
        if i[1]==Carrier: l.append(i[0]*0.05)
    for i in FlightNumberOnTime:
        if i[1]==FlightNumber: l.append(i[0]*0.2)
    for i in OriginOnTime: 
        if i[1]==Origin: l.append(i[0]*0.1)
    for i in DestinationOnTime:
        if i[1]==Destination: l.append(i[0]*0.1)
        
    ArrivalOnTimeCoef=sum(l)
    return round((ArrivalOnTimeCoef/100)+1,2)


examples ={'ticket1':{'Carrier':'US', 'FlightNumber':1036, 'Origin':'MLB' ,'Destination':'COS'},
           'ticket2':{'Carrier':'US', 'FlightNumber':197, 'Origin':'NA' ,'Destination':'TSS'},
           'ticket3':{'Carrier':'NA', 'FlightNumber':13, 'Origin':'GEG' ,'Destination':'NA'},
           'ticket4':{'Carrier':'PS', 'FlightNumber':'NA', 'Origin':'MLB' ,'Destination':'OKC'},
           'ticket5':{'Carrier':'CO', 'FlightNumber':0, 'Origin':'MLB' ,'Destination':'CAK'},
           'ticket6':{'Carrier':'NA', 'FlightNumber':'NA', 'Origin':'NA' ,'Destination':'NA'},
           'ticket7':{'Carrier':'CO', 'FlightNumber':'NA', 'Origin':'NA' ,'Destination':''},
           'ticket8':{'Carrier':'CO', 'FlightNumber':'NA', 'Origin': 5 ,'Destination':'COS'},
           }

BasePrice=100

for i in examples:
    ArrivalOnTimeCoef=predictNoArrDelay(examples[i]['Carrier'],examples[i]['FlightNumber'],examples[i]['Origin'],examples[i]['Destination'])
    FlightTicketPrice=BasePrice*ArrivalOnTimeCoef
    print ('Coefficient of Arrival on time for {} is {}'.format(i,ArrivalOnTimeCoef))
    print ('The Price for an Air {} should be in around {} % more expensive than base ticket price.'.format(i,round(FlightTicketPrice,1)-100,))
    print ()

